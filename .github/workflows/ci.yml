name: CI
on: workflow_call
defaults:
  run:
    shell: bash
jobs:
  check-formatting-dockerfile:
    name: Check Formatting (Dockerfile)
    runs-on: ${{vars.RUNS_ON}}
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Check formatting
        uses: hadolint/hadolint-action@v3.1.0
  check-formatting-markdown:
    name: Check Formatting (Markdown)
    runs-on: ${{vars.RUNS_ON}}
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Check formatting
        uses: davidanson/markdownlint-cli2-action@v19.1.0
        with:
          globs: '**/*.md'
  build-and-test:
    name: Build & Test
    runs-on: ${{vars.RUNS_ON}}
    timeout-minutes: 30
    services:
      registry:
        image: registry
        ports:
          - 5000:5000
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - name: Determine info
        id: info
        run: |
          PLATFORMS=(
            linux/amd64
            linux/arm/v7
            linux/arm64
            linux/ppc64le
            linux/riscv64
            linux/s390x
          )
          SAVE_IFS="$IFS"
          IFS=","
          PLATFORMS="${PLATFORMS[*]}"
          IFS="$SAVE_IFS"
          TEMP_IMAGE='localhost:5000/base-ubuntu'
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "base-image-tag=$TEMP_IMAGE:base-image" >> $GITHUB_OUTPUT
          echo "test-image-tag=$TEMP_IMAGE:test" >> $GITHUB_OUTPUT
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0
        with:
          image: ${{vars.SETUP_QEMU_IMAGE}}
          platforms: ${{steps.info.outputs.platforms}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0
        id: buildx
        with:
          driver-opts: network=host
      - name: Build image
        uses: docker/build-push-action@v6.16.0
        with:
          context: .
          builder: ${{steps.buildx.outputs.name}}
          platforms: ${{steps.info.outputs.platforms}}
          tags: ${{steps.info.outputs.base-image-tag}}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
      - name: Build test image
        uses: docker/build-push-action@v6.16.0
        with:
          context: ./test
          builder: ${{steps.buildx.outputs.name}}
          build-contexts: |
            base-image:ci=docker-image://${{steps.info.outputs.base-image-tag}}
          platforms: ${{steps.info.outputs.platforms}}
          tags: ${{steps.info.outputs.test-image-tag}}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
      - name: Run tests
        run: >
          for PLATFORM in ${PLATFORMS//,/ }; do
            echo "::group::Run test ($PLATFORM)"
            docker pull --platform "$PLATFORM" "$TEST_IMAGE_TAG" > /dev/null
            docker run --rm \
              --platform "$PLATFORM" \
              -e 'TZ=America/Toronto' \
              -e 'PUID=9999' -e 'PGID=9999' -e 'SGID=10000,10001' \
              "$TEST_IMAGE_TAG"
            echo '::endgroup::'
          done
        env:
          TEST_IMAGE_TAG: ${{steps.info.outputs.test-image-tag}}
          PLATFORMS: ${{steps.info.outputs.platforms}}
      - name: Hide outdated build details comments
        uses: int128/hide-comment-action@v1.42.0
        if: github.event_name == 'pull_request'
        with:
          starts-with: <!-- build details -->
      - name: Create build details comment
        id: image-details
        if: github.event_name == 'pull_request'
        run: |
          VERSION=$(grep -E '^FROM ubuntu:[a-z]+-[0-9]+$' Dockerfile)
          VERSION=${VERSION##*:}
          STREAM=${VERSION%-*}
          REMOTE_IMAGE_TAG=$REMOTE_IMAGE:$STREAM
          set +e
          EXISTS_OUTPUT=$(
            docker buildx imagetools inspect $REMOTE_IMAGE_TAG 2> /dev/null
          )
          EXISTS_RESULT="$?"
          set -e
          if [[ "$EXISTS_OUTPUT" == "" || "$EXISTS_RESULT" -ne 0  ]]; then
            echo "Stream tag '$STREAM' does not exist, using latest tag"
            REMOTE_IMAGE_TAG=$REMOTE_IMAGE:latest
          fi
          BODY=$'<!-- build details -->\n\n'
          BODY+=$'## Build Details\n\n'
          for PLATFORM in ${PLATFORMS//,/ }; do
            docker pull --platform=$PLATFORM $LOCAL_IMAGE_TAG
            SIZE_NEW=$(docker inspect -f '{{.Size}}' $LOCAL_IMAGE_TAG)
            DETAILS=$(
              docker image history --format \
              'table | {{.Size}} | {{.CreatedBy}} |' $LOCAL_IMAGE_TAG
            )
            DETAILS=${DETAILS#*$'\n'}
            docker rmi -f $LOCAL_IMAGE_TAG
            if docker pull --platform=$PLATFORM $REMOTE_IMAGE_TAG; then
              SIZE_OLD=$(docker inspect -f '{{.Size}}' $REMOTE_IMAGE_TAG)
            else
              SIZE_OLD=$SIZE_NEW
            fi
            docker rmi -f $REMOTE_IMAGE_TAG
            SIZE=$(echo $SIZE_NEW | numfmt --to=iec --suffix=B --format='%.2f')
            SIZE_DIFF=$(
              echo "$(( SIZE_NEW - SIZE_OLD ))" |
              numfmt --to=iec --suffix=B --format='%.2f'
            )
            if (( $SIZE_NEW > $SIZE_OLD )); then
              SIZE="$SIZE \`+$SIZE_DIFF\`"
            elif (( $SIZE_NEW < $SIZE_OLD )); then
              SIZE="$SIZE \`$SIZE_DIFF\`"
            fi
            BODY+="\`$PLATFORM\`: **$SIZE**"
            BODY+=$'\n\n<details>\n<summary>Layer Breakdown</summary>\n\n'
            BODY+=$'| Size | Created By |\n'
            BODY+=$'| ---- | ---------- |\n'
            BODY+="$DETAILS"
            BODY+=$'\n\n</details>\n\n'
          done
          gh pr comment "$PULL_REQUEST_NUMBER" --body "$BODY"
        env:
          REMOTE_IMAGE: ghcr.io/${{github.repository_owner}}/base-ubuntu
          LOCAL_IMAGE_TAG: ${{steps.info.outputs.base-image-tag}}
          PLATFORMS: ${{steps.info.outputs.platforms}}
          PULL_REQUEST_NUMBER: ${{github.event.pull_request.number}}
          GITHUB_TOKEN: ${{github.token}}
