name: CI
on:
  workflow_call:
env:
  IMAGE_TAG: ghcr.io/${{github.repository_owner}}/base-ubuntu:latest
  IMAGE_TEMP_TAG: localhost:5000/ci/base-ubuntu:latest
defaults:
  run:
    shell: bash
jobs:
  check-formatting-dockerfile:
    name: Check Formatting (Dockerfile)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
      - name: Check formatting
        uses: hadolint/hadolint-action@v2.1.0
  check-formatting-markdown:
    name: Check Formatting (Markdown)
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
      - name: Check formatting
        uses: davidanson/markdownlint-cli2-action@v5.1.0
        with:
          globs: '**/*.md'
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      PLATFORMS: linux/amd64,linux/arm/v7,linux/arm64,linux/riscv64,linux/s390x
    services:
      registry:
        image: registry
        ports:
          - 5000:5000
    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0
        id: buildx
        with:
          driver-opts: network=host
      - name: Set up cache
        uses: actions/cache@v3.0.2
        with:
          path: /tmp/.buildx-cache
          key: ${{runner.os}}-buildx-${{github.sha}}
          restore-keys: ${{runner.os}}-buildx-
      - name: Build image
        uses: docker/build-push-action@v2.10.0
        with:
          context: .
          builder: ${{steps.buildx.outputs.name}}
          tags: ${{env.IMAGE_TEMP_TAG}}
          platforms: ${{env.PLATFORMS}}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          push: true
      - name: Generate image details
        id: image-details
        if: github.event_name == 'pull_request'
        run: |
          BODY=$'## Build Details\n\n'
          for PLATFORM in ${PLATFORMS//,/ }; do
            docker pull --platform=$PLATFORM ${{env.IMAGE_TAG}}
            SIZE_OLD=$(docker inspect -f '{{.Size}}' ${{env.IMAGE_TAG}})
            docker rmi -f ${{env.IMAGE_TEMP_TAG}}
            docker pull --platform=$PLATFORM ${{env.IMAGE_TEMP_TAG}}
            SIZE_NEW=$(docker inspect -f '{{.Size}}' ${{env.IMAGE_TEMP_TAG}})
            DETAILS=$(
              docker image history --format \
              'table | {{.Size}} | {{.CreatedBy}} |' ${{env.IMAGE_TEMP_TAG}}
            )
            DETAILS=${DETAILS#*$'\n'}
            docker rmi -f ${{env.IMAGE_TEMP_TAG}}
            SIZE=$(echo $SIZE_NEW | numfmt --to=iec --suffix=B --format='%.2f')
            SIZE_DIFF=$(
              echo "$(( SIZE_NEW - SIZE_OLD ))" |
              numfmt --to=iec --suffix=B --format='%.2f'
            )
            if (( $SIZE_NEW > $SIZE_OLD )); then
              SIZE="$SIZE \`+$SIZE_DIFF\`"
            elif (( $SIZE_NEW < $SIZE_OLD )); then
              SIZE="$SIZE \`$SIZE_DIFF\`"
            fi
            BODY+="\`$PLATFORM\`: **$SIZE**"
            BODY+=$'\n\n<details>\n<summary>Layer Breakdown</summary>\n\n'
            BODY+=$'| Size | Created By |\n'
            BODY+=$'| ---- | ---------- |\n'
            BODY+="$DETAILS"
            BODY+=$'\n\n</details>\n\n'
          done
          BODY=${BODY//'%'/'%25'}
          BODY=${BODY//$'\n'/'%0A'}
          BODY=${BODY//$'\r'/'%0D'}
          echo "::set-output name=body::$BODY"
      - name: Hide outdated build details comments
        uses: int128/hide-comment-action@v1.4.0
        if: github.event_name == 'pull_request'
      - name: Create build details comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v2.0.0
        with:
          issue-number: ${{github.event.pull_request.number}}
          body: ${{steps.image-details.outputs.body}}
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
  test:
    name: Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs:
      - build
    env:
      IMAGE_TEST_TAG: localhost:5000/ci/base-ubuntu-test:latest
    services:
      registry:
        image: registry
        ports:
          - 5000:5000
    steps:
      - name: Checkout
        uses: actions/checkout@v3.0.2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0
        id: buildx
        with:
          driver-opts: network=host
      - name: Set up cache
        uses: actions/cache@v3.0.2
        with:
          path: /tmp/.buildx-cache
          key: ${{runner.os}}-buildx-${{github.sha}}
          restore-keys: ${{runner.os}}-buildx-
      - name: Build image
        uses: docker/build-push-action@v2.10.0
        with:
          context: .
          builder: ${{steps.buildx.outputs.name}}
          tags: ${{env.IMAGE_TEMP_TAG}}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          push: true
      - name: Build test image
        uses: docker/build-push-action@v2.10.0
        with:
          context: ./test
          builder: ${{steps.buildx.outputs.name}}
          build-args: IMAGE_TAG=${{env.IMAGE_TEMP_TAG}}
          tags: ${{env.IMAGE_TEST_TAG}}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          load: true
      - name: Test
        run: >
          docker run --rm
          -e 'TZ=America/Toronto'
          -e 'PUID=9999' -e 'PGID=9999' -e 'SGID=10000,10001'
          ${{env.IMAGE_TEST_TAG}}
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
