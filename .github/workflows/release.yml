name: Release
on:
  workflow_run:
    workflows: CI
    branches: main
    types: completed
permissions:
  contents: read
  packages: write
jobs:
  build:
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: >
      github.event_name == 'workflow_run' &&
      github.event.workflow_run.conclusion == 'success'
    services:
      registry:
        image: registry
        ports:
          - 5000:5000
    env:
      PACKAGE: ghcr.io/${{github.repository_owner}}/base-ubuntu
      PACKAGE_TEMP: localhost:5000/${{github.repository_owner}}/base-ubuntu
      PLATFORMS: linux/amd64,linux/arm/v7,linux/arm64,linux/ppc64le
      CACHE_FROM: type=local,src=/tmp/.buildx-cache
      CACHE_TO: type=local,mode=max,dest=/tmp/.buildx-cache
    steps:
      - name: Generate tags
        run: |
          TAGS="$PACKAGE:latest"
          TAGS="$PACKAGE:focal-$(date +%Y%m%d),$TAGS"
          echo "TAGS=$TAGS" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.1.0
        with:
          platforms: ${{env.PLATFORMS}}
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1.3.0
        with:
          driver-opts: network=host
          version: latest
      - name: Set up cache
        uses: actions/cache@v2.1.5
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{hashFiles('Dockerfile', '.dockerignore', 'root/**')}}
          restore-keys: buildx-
      - name: Build image
        uses: docker/build-push-action@v2.4.0
        id: build
        with:
          builder: ${{steps.buildx.outputs.name}}
          context: .
          platforms: ${{env.PLATFORMS}}
          tags: ${{env.PACKAGE_TEMP}}
          cache-from: ${{env.CACHE_FROM}}
          cache-to: ${{env.CACHE_TO}}
          push: true
      - name: Determine release
        id: release
        run: |
          DIGEST=$(
            docker buildx imagetools inspect $PACKAGE_TEMP |
            grep Digest | cut -c12-
          )
          DIGEST_LATEST=$(
            docker buildx imagetools inspect $PACKAGE |
            grep Digest | cut -c12-
          )
          echo "Digest (new):    $DIGEST"
          echo "Digest (latest): $DIGEST_LATEST"
          if [ "$DIGEST" != "$DIGEST_LATEST" ]; then
            DATE=$(date +%Y%m%d)
            TAG_PREFIX="focal-$DATE"
            EXPRESSION="[.[].tag_name|select(startswith(\"$TAG_PREFIX\"))]"
            EXPRESSION="$EXPRESSION|max//\"\"|split(\".\")[1]//\"-1\""
            URL=https://api.github.com/repos/${{github.repository}}/releases
            BUILD_NUMBER=$(curl -sSL $URL | jq -r $EXPRESSION)
            BUILD_NUMBER=$((BUILD_NUMBER + 1))
            echo '::set-output name=create::true'
            echo "::set-output name=name::$TAG_PREFIX.$BUILD_NUMBER"
          fi
      - name: Create release
        if: steps.release.outputs.create
        uses: ncipollo/release-action@v1.8.5
        with:
          tag: ${{steps.release.outputs.name}}
          token: ${{secrets.RELEASE_TOKEN}}
          allowUpdates: true
          commit: main
      - name: Login to registry
        if: steps.release.outputs.create
        uses: docker/login-action@v1.9.0
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{github.token}}
      - name: Push image
        if: steps.release.outputs.create
        uses: docker/build-push-action@v2.4.0
        with:
          builder: ${{steps.buildx.outputs.name}}
          context: .
          platforms: ${{env.PLATFORMS}}
          tags: ${{env.TAGS}}
          cache-from: ${{env.CACHE_FROM}}
          cache-to: ${{env.CACHE_TO}}
          push: true
